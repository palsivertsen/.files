snippet ttm "Table test map"
tests := map[string]struct{
	${1:fields}
}{
	"${2:name}": { $3 },
}
for name, tt := range tests {
	tt := tt
	t.Run(name, func(t *testing.T) {
		$0
	})
}
endsnippet

snippet ttm "Table test struct"
tests := []struct{
	${1:fields}
}{
	{ $3 },
}
for _, tt := range tests {
	tt := tt
	t.Run(fmt.Sprintf("${2:%#v}", ${3:tt}), func(t *testing.T) {
		$0
	})
}
endsnippet

# pre_expand "snip.buffer[1] += 'GoImport github.com/golang/mock/gomock'"
snippet gomock "gomock"
ctrl := gomock.NewController(t)
defer ctrl.Finish()
endsnippet

post_jump "vim.eval('feedkeys("\<C-R>=UltiSnips#ExpandSnippet()\<CR>")')"
snippet tf "Test Fuction"
test$0
endsnippet

post_jump "vim.eval('feedkeys("\<C-R>=UltiSnips#ExpandSnippet()\<CR>")')"
snippet tys "struct"
st$0
endsnippet

post_jump "vim.eval('feedkeys("\<C-R>=UltiSnips#ExpandSnippet()\<CR>")')"
snippet tyi "interface"
interface$0
endsnippet

snippet hand "HTTP Handler"
func ${1} ${2:ServeHTTP}(w http.ResponseWriter, r *http.Request) {
	${0:${VISUAL}}
}
endsnippet

snippet il "if error, log"
if $1 != nil {
	log.${2:Fatal}($1)
}
endsnippet

snippet ni "Not implemented"
panic("Not implemented")
endsnippet

snippet errors "New error"
errors.New("$1")
endsnippet

snippet len "len"
len($1)
endsnippet

snippet ifnn "If x not nil"
if ${1:err} != nil {
	${2:return $1}
}
endsnippet

snippet ctxbackround "background context"
ctx := context.Background()
endsnippet

snippet ctxtodo "TODO context"
ctx := context.TODO()
endsnippet

snippet mu "Mutex"
mu sync.Mutex
endsnippet

snippet murw "RWMutex"
mu sync.RWMutex
endsnippet
